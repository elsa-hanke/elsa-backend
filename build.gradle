plugins {
    id "org.jetbrains.kotlin.jvm" version "${kotlinVersion}"
    id "org.jetbrains.kotlin.kapt" version "${kotlinVersion}"
    id "org.jetbrains.kotlin.plugin.spring" version "${kotlinVersion}"
    id "org.jetbrains.kotlin.plugin.jpa" version "${kotlinVersion}"
    // id "org.jlleitschuh.gradle.ktlint" version "11.2.0"
    id "io.gitlab.arturbosch.detekt" version "${detektVersion}"
    id "jacoco"
    id "org.springframework.boot" version "${springBootVersion}"
    id "io.spring.dependency-management" version "1.1.0"
    id "com.google.cloud.tools.jib"
    id "com.gorylenko.gradle-git-properties"
    id "org.liquibase.gradle" version "2.1.1"
    id "org.sonarqube"
    id "org.owasp.dependencycheck"
    id "com.apollographql.apollo3" version "${apolloVersion}"
    id "org.hibernate.orm" version "${hibernateVersion}"
}

apollo {
    packageName.set("fi.elsapalvelu.elsa")
    generateKotlinModels.set(true)
}

group = "fi.elsapalvelu.elsa"
version = "0.0.1-SNAPSHOT"

description = ""

assert System.properties["java.specification.version"] == "11" || "12" || "13" || "14" || "15" || "16" || "17"

apply from: "gradle/docker.gradle"
apply from: "gradle/sonar.gradle"
apply from: 'gradle/kotlin.gradle'

if (project.hasProperty("prod")) {
    apply from: "gradle/profile_prod.gradle"
} else {
    apply from: "gradle/profile_dev.gradle"
}

defaultTasks "bootRun"

springBoot {
    mainClass.set("fi.elsapalvelu.elsa.ElsaBackendApp")
}

test {
    useJUnitPlatform()
    exclude "**/*IT*", "**/*IntTest*"
    testLogging {
        events 'FAILED', 'SKIPPED'
    }
    reports.html.enabled = false
}

tasks.register('integrationTest', Test) {
    useJUnitPlatform()
    description = "Execute integration tests."
    group = "verification"
    include "**/*IT*", "**/*IntTest*"
    testLogging {
        events 'FAILED', 'SKIPPED'
    }
    if (project.hasProperty('testcontainers')) {
        environment 'spring.profiles.active', 'testcontainers'
    }
    reports.html.enabled = false
}

check.dependsOn integrationTest
tasks.register('testReport', TestReport) {
    destinationDirectory = file("$buildDir/reports/tests")
    testResults.from(test)
}

tasks.register('integrationTestReport', TestReport) {
    destinationDirectory = file("$buildDir/reports/tests")
    testResults.from(integrationTest)
}

if (!project.hasProperty("runList")) {
    project.ext.runList = "main"
}

gitProperties {
    failOnNoGitDirectory = false
    keys = ["git.branch", "git.commit.id.abbrev", "git.commit.id.describe"]
}

dependencyCheck {
    autoUpdate = false
    failBuildOnCVSS = 5
    failOnError = true
    suppressionFile = "owasp-suppressions.xml"
}

configurations {
    providedRuntime
    implementation.exclude module: "spring-boot-starter-tomcat"
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://build.shibboleth.net/nexus/content/repositories/releases/" }
}

dependencies {
    implementation "tech.jhipster:jhipster-framework:${jhipsterDependenciesVersion}"
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:${jacksonVersion}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-hibernate5-jakarta"
    implementation "org.ehcache:ehcache:3.10.8"
    implementation "org.hibernate.orm:hibernate-jcache:${hibernateVersion}"
    implementation "org.hibernate.orm:hibernate-envers:${hibernateVersion}"
    implementation "org.liquibase:liquibase-core"
    implementation "org.springframework.boot:spring-boot-starter-mail"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation("org.springframework.boot:spring-boot-starter-web") {
        exclude module: "spring-boot-starter-tomcat"
    }
    implementation "org.springframework.boot:spring-boot-starter-undertow"
    implementation "org.springframework.boot:spring-boot-starter-thymeleaf:${springBootVersion}"
    implementation "org.thymeleaf:thymeleaf-spring6:3.1.2.RELEASE"
    implementation "org.thymeleaf.extras:thymeleaf-extras-java8time:3.0.4.RELEASE"
    implementation "org.springframework.security:spring-security-saml2-service-provider:${springSecurityVersion}"
    runtimeOnly "org.postgresql:postgresql"
    testImplementation "org.testcontainers:postgresql:1.17.6"
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    annotationProcessor "org.hibernate.orm:hibernate-jpamodelgen:${hibernateVersion}"
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.springframework.security:spring-security-test"
    testImplementation "com.h2database:h2:2.1.214"
    implementation "org.jetbrains.kotlin:kotlin-reflect"
    implementation 'io.awspring.cloud:spring-cloud-aws-starter:3.2.1'
    implementation 'io.awspring.cloud:spring-cloud-aws-starter-s3:3.2.1'
    implementation "org.apache.commons:commons-text:1.10.0"
    implementation "net.coobird:thumbnailator:0.4.14"
    implementation "org.fluentd:fluent-logger:0.3.4"
    implementation "com.sndyuk:logback-more-appenders:1.8.6"
    implementation "com.apollographql.apollo3:apollo-runtime:${apolloVersion}"
    implementation "com.squareup.okhttp3:okhttp-tls:4.9.3"
    implementation "net.javacrumbs.shedlock:shedlock-spring:4.33.0"
    implementation "net.javacrumbs.shedlock:shedlock-provider-jdbc-template:4.33.0"
    implementation 'com.itextpdf:kernel:8.0.5'
    implementation "com.itextpdf:html2pdf:5.0.5"
    implementation "com.itextpdf:pdfa:8.0.5"
    testRuntimeOnly("org.junit.platform:junit-platform-launcher:1.11.4")
    implementation "org.springframework.integration:spring-integration-sftp"
    implementation("com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.18.3")
    implementation 'net.i2p.crypto:eddsa:0.3.0'
}

apollo {
    packageName.set("fi.elsapalvelu.elsa")
}

tasks.register('cleanResources', Delete) {
    delete "build/resources"
}

wrapper {
    gradleVersion = "7.6.4"
}

compileJava.dependsOn processResources
processResources.dependsOn bootBuildInfo
